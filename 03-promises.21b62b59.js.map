{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA2BA,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAGtBG,EAAO,CAAEJ,WAAUC,S,GAClBA,E,IAnCMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAEC,iBAMJ,IAJE,IAAIC,EAAQC,OAAOH,EAAEI,cAAcf,MAAMgB,OACrCC,EAAOH,OAAOH,EAAEI,cAAcE,KAAKD,OACnCE,EAASJ,OAAOH,EAAEI,cAAcG,OAAOF,OAEpCG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDrB,EAAcqB,EAAUN,GACrBO,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBJ,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,GAC5Da,GACFY,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBJ,EAAA0B,OAAOI,QAAQ,sBAAuCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,GAC3Da,GACPA,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix\";\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(e){\n  e.preventDefault();\n \n  let delay = Number(e.currentTarget.delay.value);\n  let step = Number(e.currentTarget.step.value);\n  let amount = Number(e.currentTarget.amount.value);\n\nfor (let position = 1; position <= amount; position += 1) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }, delay)\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\ndelay += step;\n}\n}\n\n\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n  \n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        };\n  \n        reject({ position, delay });\n      }, delay);\n    });\n};\n\n// function onFormSubmit(e){\n//   e.preventDefault();\n \n//   let delay = Number(e.currentTarget.delay.value);\n//   let step = Number(e.currentTarget.step.value);\n//   let amount = Number(e.currentTarget.amount.value);\n\n// for (let position = 1; position <= amount; position += 1) {\n//   createPromise(position, delay)\n//   .then(({ position, delay }) => {\n//     setTimeout(() => {\n//       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     }, delay)\n//   })\n//   .catch(({ position, delay }) => { \n//     setTimeout(() => {\n//       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//     }, delay) \n//   });\n// delay += step;\n// }\n// }\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   let promiseValue = {position, delay};\n\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve(promiseValue);\n//     }\n//       reject(promiseValue);\n//   })\n// }"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","Number","currentTarget","value","step","amount","position1","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.21b62b59.js.map"}