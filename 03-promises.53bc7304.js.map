{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA2BA,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAGtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAnCAQ,SAASC,cAAc,SAC/BC,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOH,EAAEI,cAAcf,MAAMgB,OACrCC,EAAOH,OAAOH,EAAEI,cAAcE,KAAKD,OACnCE,EAASJ,OAAOH,EAAEI,cAAcG,OAAOF,OAE7C,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDrB,EAAcqB,EAAUN,GACrBO,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAyB,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,GAC9Da,GACFU,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAyB,OAAOG,QAAQ,sBAAoBzB,QAAiBC,MAAU,GAC7Da,GACPA,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix\";\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(e){\n  e.preventDefault();\n \n  let delay = Number(e.currentTarget.delay.value);\n  let step = Number(e.currentTarget.step.value);\n  let amount = Number(e.currentTarget.amount.value);\n\nfor (let position = 1; position <= amount; position += 1) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }, delay)\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\ndelay += step;\n}\n}\n\n\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n  \n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        };\n  \n        reject({ position, delay });\n      }, delay);\n    });\n};\n\n// function onFormSubmit(e){\n//   e.preventDefault();\n \n//   let delay = Number(e.currentTarget.delay.value);\n//   let step = Number(e.currentTarget.step.value);\n//   let amount = Number(e.currentTarget.amount.value);\n\n// for (let position = 1; position <= amount; position += 1) {\n//   createPromise(position, delay)\n//   .then(({ position, delay }) => {\n//     setTimeout(() => {\n//       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     }, delay)\n//   })\n//   .catch(({ position, delay }) => { \n//     setTimeout(() => {\n//       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//     }, delay) \n//   });\n// delay += step;\n// }\n// }\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   let promiseValue = {position, delay};\n\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve(promiseValue);\n//     }\n//       reject(promiseValue);\n//   })\n// }"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","Number","currentTarget","value","step","amount","position1","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.53bc7304.js.map"}